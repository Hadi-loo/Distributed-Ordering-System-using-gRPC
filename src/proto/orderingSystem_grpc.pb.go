// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: src/proto/orderingSystem.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderManagement_UnaryGetOrder_FullMethodName        = "/orderingSystem.OrderManagement/UnaryGetOrder"
	OrderManagement_ServerStreamGetOrder_FullMethodName = "/orderingSystem.OrderManagement/ServerStreamGetOrder"
	OrderManagement_ClientStreamGetOrder_FullMethodName = "/orderingSystem.OrderManagement/ClientStreamGetOrder"
	OrderManagement_BiDiStreamGetOrder_FullMethodName   = "/orderingSystem.OrderManagement/BiDiStreamGetOrder"
)

// OrderManagementClient is the client API for OrderManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderManagementClient interface {
	UnaryGetOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	ServerStreamGetOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (OrderManagement_ServerStreamGetOrderClient, error)
	ClientStreamGetOrder(ctx context.Context, opts ...grpc.CallOption) (OrderManagement_ClientStreamGetOrderClient, error)
	BiDiStreamGetOrder(ctx context.Context, opts ...grpc.CallOption) (OrderManagement_BiDiStreamGetOrderClient, error)
}

type orderManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderManagementClient(cc grpc.ClientConnInterface) OrderManagementClient {
	return &orderManagementClient{cc}
}

func (c *orderManagementClient) UnaryGetOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, OrderManagement_UnaryGetOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderManagementClient) ServerStreamGetOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (OrderManagement_ServerStreamGetOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderManagement_ServiceDesc.Streams[0], OrderManagement_ServerStreamGetOrder_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orderManagementServerStreamGetOrderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderManagement_ServerStreamGetOrderClient interface {
	Recv() (*OrderResponse, error)
	grpc.ClientStream
}

type orderManagementServerStreamGetOrderClient struct {
	grpc.ClientStream
}

func (x *orderManagementServerStreamGetOrderClient) Recv() (*OrderResponse, error) {
	m := new(OrderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderManagementClient) ClientStreamGetOrder(ctx context.Context, opts ...grpc.CallOption) (OrderManagement_ClientStreamGetOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderManagement_ServiceDesc.Streams[1], OrderManagement_ClientStreamGetOrder_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orderManagementClientStreamGetOrderClient{stream}
	return x, nil
}

type OrderManagement_ClientStreamGetOrderClient interface {
	Send(*OrderRequest) error
	CloseAndRecv() (*OrderResponse, error)
	grpc.ClientStream
}

type orderManagementClientStreamGetOrderClient struct {
	grpc.ClientStream
}

func (x *orderManagementClientStreamGetOrderClient) Send(m *OrderRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderManagementClientStreamGetOrderClient) CloseAndRecv() (*OrderResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(OrderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderManagementClient) BiDiStreamGetOrder(ctx context.Context, opts ...grpc.CallOption) (OrderManagement_BiDiStreamGetOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderManagement_ServiceDesc.Streams[2], OrderManagement_BiDiStreamGetOrder_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orderManagementBiDiStreamGetOrderClient{stream}
	return x, nil
}

type OrderManagement_BiDiStreamGetOrderClient interface {
	Send(*OrderRequest) error
	Recv() (*OrderResponse, error)
	grpc.ClientStream
}

type orderManagementBiDiStreamGetOrderClient struct {
	grpc.ClientStream
}

func (x *orderManagementBiDiStreamGetOrderClient) Send(m *OrderRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderManagementBiDiStreamGetOrderClient) Recv() (*OrderResponse, error) {
	m := new(OrderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderManagementServer is the server API for OrderManagement service.
// All implementations must embed UnimplementedOrderManagementServer
// for forward compatibility
type OrderManagementServer interface {
	UnaryGetOrder(context.Context, *OrderRequest) (*OrderResponse, error)
	ServerStreamGetOrder(*OrderRequest, OrderManagement_ServerStreamGetOrderServer) error
	ClientStreamGetOrder(OrderManagement_ClientStreamGetOrderServer) error
	BiDiStreamGetOrder(OrderManagement_BiDiStreamGetOrderServer) error
	mustEmbedUnimplementedOrderManagementServer()
}

// UnimplementedOrderManagementServer must be embedded to have forward compatible implementations.
type UnimplementedOrderManagementServer struct {
}

func (UnimplementedOrderManagementServer) UnaryGetOrder(context.Context, *OrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryGetOrder not implemented")
}
func (UnimplementedOrderManagementServer) ServerStreamGetOrder(*OrderRequest, OrderManagement_ServerStreamGetOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamGetOrder not implemented")
}
func (UnimplementedOrderManagementServer) ClientStreamGetOrder(OrderManagement_ClientStreamGetOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamGetOrder not implemented")
}
func (UnimplementedOrderManagementServer) BiDiStreamGetOrder(OrderManagement_BiDiStreamGetOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method BiDiStreamGetOrder not implemented")
}
func (UnimplementedOrderManagementServer) mustEmbedUnimplementedOrderManagementServer() {}

// UnsafeOrderManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderManagementServer will
// result in compilation errors.
type UnsafeOrderManagementServer interface {
	mustEmbedUnimplementedOrderManagementServer()
}

func RegisterOrderManagementServer(s grpc.ServiceRegistrar, srv OrderManagementServer) {
	s.RegisterService(&OrderManagement_ServiceDesc, srv)
}

func _OrderManagement_UnaryGetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderManagementServer).UnaryGetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderManagement_UnaryGetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderManagementServer).UnaryGetOrder(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderManagement_ServerStreamGetOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderManagementServer).ServerStreamGetOrder(m, &orderManagementServerStreamGetOrderServer{stream})
}

type OrderManagement_ServerStreamGetOrderServer interface {
	Send(*OrderResponse) error
	grpc.ServerStream
}

type orderManagementServerStreamGetOrderServer struct {
	grpc.ServerStream
}

func (x *orderManagementServerStreamGetOrderServer) Send(m *OrderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OrderManagement_ClientStreamGetOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderManagementServer).ClientStreamGetOrder(&orderManagementClientStreamGetOrderServer{stream})
}

type OrderManagement_ClientStreamGetOrderServer interface {
	SendAndClose(*OrderResponse) error
	Recv() (*OrderRequest, error)
	grpc.ServerStream
}

type orderManagementClientStreamGetOrderServer struct {
	grpc.ServerStream
}

func (x *orderManagementClientStreamGetOrderServer) SendAndClose(m *OrderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderManagementClientStreamGetOrderServer) Recv() (*OrderRequest, error) {
	m := new(OrderRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OrderManagement_BiDiStreamGetOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderManagementServer).BiDiStreamGetOrder(&orderManagementBiDiStreamGetOrderServer{stream})
}

type OrderManagement_BiDiStreamGetOrderServer interface {
	Send(*OrderResponse) error
	Recv() (*OrderRequest, error)
	grpc.ServerStream
}

type orderManagementBiDiStreamGetOrderServer struct {
	grpc.ServerStream
}

func (x *orderManagementBiDiStreamGetOrderServer) Send(m *OrderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderManagementBiDiStreamGetOrderServer) Recv() (*OrderRequest, error) {
	m := new(OrderRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderManagement_ServiceDesc is the grpc.ServiceDesc for OrderManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orderingSystem.OrderManagement",
	HandlerType: (*OrderManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryGetOrder",
			Handler:    _OrderManagement_UnaryGetOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamGetOrder",
			Handler:       _OrderManagement_ServerStreamGetOrder_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamGetOrder",
			Handler:       _OrderManagement_ClientStreamGetOrder_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BiDiStreamGetOrder",
			Handler:       _OrderManagement_BiDiStreamGetOrder_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "src/proto/orderingSystem.proto",
}
